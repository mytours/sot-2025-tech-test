#!/usr/bin/env node

import { writeFile } from 'node:fs/promises';
import { resolve } from 'node:path';
import process from 'node:process';

const PROVISION_URL = 'https://sot-2025.stqry.dev/provision';
const ui = {
  title: '\x1b[1m\x1b[36m',
  bold: '\x1b[1m',
  success: '\x1b[32m',
  warn: '\x1b[33m',
  error: '\x1b[31m',
  reset: '\x1b[0m',
};

async function fetchApiKey(CandidateToken) {
  const response = await fetch(PROVISION_URL, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ CandidateToken }),
  });
  const text = await response.text().catch(() => '');
  if (!response.ok) {
    let detail = `status ${response.status}`;
    if (text) {
      try {
        const parsed = JSON.parse(text);
        if (typeof parsed?.Message === 'string' && parsed.Message.trim()) {
          detail = parsed.Message.trim();
        }
      } catch (error) {
        const summary = text.split('\n', 1)[0].trim().slice(0, 60);
        if (summary) {
          detail = summary;
        }
      }
    }
    throw new Error(detail);
  }
  const data = text ? JSON.parse(text) : {};
  const apiKey = data?.APIKey;
  if (typeof apiKey !== 'string' || !apiKey.trim()) {
    throw new Error('Provisioning service returned an invalid API key.');
  }
  return apiKey.trim();
}

async function writeEnvFile(apiKey) {
  const contents = `# Generated by provision.js on ${new Date().toISOString()}\n` +
    `VITE_OPENAI_API_KEY=${apiKey}\n`;
  await writeFile(resolve(process.cwd(), '.env.local'), contents, 'utf8');
}

function resolveCandidateToken(rawToken) {
  if (!rawToken || !rawToken.trim()) {
    console.error(`\n${ui.error}${ui.bold}Error${ui.reset}: Provide your candidateToken as the first argument.`);
    console.error(`\n${ui.bold}Usage${ui.reset}: npm run provision <candidateToken>`);
    process.exit(1);
  }
  return rawToken.trim();
}

async function main() {
  try {
    console.log(`${ui.title}STQRY Tech Test 2025${ui.reset}`);
    const CandidateToken = resolveCandidateToken(process.argv[2]);
    const apiKey = await fetchApiKey(CandidateToken);
    await writeEnvFile(apiKey);
    console.log(`\n${ui.success}âœ” Provisioned successfully!${ui.reset}`);
    console.log(`\n${ui.bold}Saved to${ui.reset} ${resolve(process.cwd(), '.env.local')}`);
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.error(`\n${ui.error}${ui.bold}Error${ui.reset}: ${message}`);
    process.exitCode = 1;
  }
}

main();
